## These macros REQUIRE that the macro node_module be defined or the module be passed to them

%__npm() %{lua:
   if rpm.expand('%["%{rpmversion}" < "4.20"]') == '1' then
     print("/usr/bin/env NPM_CONFIG_USERCONFIG=%{_builddir}/.npmrc NPM_CONFIG_GLOBALCONFIG=%{_builddir}/npmrc NPM_CONFIG_CACHE=%{_builddir}/.npm NPM_CONFIG_LOGLEVEL=error NPM_CONFIG_FUND=false NPM_CONFIG_INIT_MODULE=%{_builddir}/.npm-init.js NPM_CONFIG_INIT.MODULE=%{_builddir}/.npm-init.js NPM_CONFIG_LOGS_DIR=null /usr/bin/npm")
   else
     print("/usr/bin/env NPM_CONFIG_USERCONFIG=%{builddir}/.npmrc NPM_CONFIG_GLOBALCONFIG=%{builddir}/npmrc NPM_CONFIG_CACHE=%{builddir}/.npm NPM_CONFIG_LOGLEVEL=error NPM_CONFIG_FUND=false NPM_CONFIG_INIT_MODULE=%{builddir}/.npm-init.js NPM_CONFIG_INIT.MODULE=%{builddir}/.npm-init.js NPM_CONFIG_LOGS_DIR=null /usr/bin/npm")
   end}

# For use in prep section
%npm_prep(n:) %{lua:
   if opt.n then
     rpm.define("node_module " .. rpm.expand("%{-n*}"))
   end
   local module = rpm.expand("%{?node_module}")
   if (module == '%{node_module}') or (module == '%node_module') or (module == '') then
     error("%node_module is not defined. Please define it using a global macro or with the -n flag.")
   end} \\\
   %{__npm} install -g %{node_module}@%{version} --prefix=. \
   %setup -T -D -n lib/node_modules/%{node_module}

%npm_install()                                                                                 \
   mkdir -p %{buildroot}%{nodejs_sitelib}/%{node_module}                                       \
   mkdir -p %{buildroot}%{_bindir}                                                             \
   cp -r ./* -t %{buildroot}%{nodejs_sitelib}/%{node_module}                                   \
   ln -sf %{nodejs_sitelib}/%{module}/bin/%{node_module} %{buildroot}%{_bindir}/%{node_module}

# For architecture dependent packages
%npm_install_sitearch()                                                                              \
   mkdir -p %{buildroot}%{nodejs_sitearch}/%{node_module}                                            \
   mkdir -p %{buildroot}%{_bindir}                                                                   \
   cp -r ./* -t %{buildroot}%{nodejs_sitearch}/%{node_module}                                        \
   ln -sf %{nodejs_sitearch}/%{node_module}/bin/%{node_module} %{buildroot}%{_bindir}/%{node_module}

# Best used in check section
%npm_audit() \
   %{__npm} audit --audit-level=low

# Best used in prep section if check fails
# -d can be used to check what it will do before running, especially if using -f
%npm_audit_fix(dfo:O:p) %{__npm} audit fix %{shrink: \
   %{-d:--dry-run}                                   \
   %{-f:--force}                                     \
   %{-o:--omit=%{-o*}}                               \
   %{-O:--only=%{-O*}}                               \
   %{-p:--package-lock-only}                         \
   %{nil}                                            \
}

# Requires nodejs-license-checker as a build dep
%npm_license_summary() \
   /usr/bin/license-checker --summary

%npm_license() \
   /usr/bin/license-checker | sed '/.*repository:.*/d;/.*publisher:.*/d;/.*email:.*/d;/.*url:.*/d;/.*path:.*/d;/.*licenseFile:.*/d;/.*noticeFile:.*/d'

# Only applicable if a test folder is provided from a source repo
%node_self_test () \
  NODE_ENV=test bin/%{node_module} -R tests
